# Stubs for rdflib.term (Python 3)
#

from typing import Any, Optional

class Node: ...

class Identifier(Node, str):
    def __new__(cls, value: Any): ...
    def eq(self, other: Any): ...
    def neq(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __eq__(self, other: Any): ...
    def __gt__(self, other: Any): ...
    def __lt__(self, other: Any): ...
    def __le__(self, other: Any): ...
    def __ge__(self, other: Any): ...
    def __hash__(self): ...

class URIRef(Identifier):
    def __new__(cls, value: Any, base: Optional[Any] = ...): ...
    def toPython(self): ...
    def n3(self, namespace_manager: Optional[Any] = ...): ...
    def defrag(self): ...
    def __reduce__(self): ...
    def __getnewargs__(self): ...
    def __add__(self, other: Any): ...
    def __radd__(self, other: Any): ...
    def __mod__(self, other: Any): ...
    def md5_term_hash(self): ...
    def de_skolemize(self): ...

class BNode(Identifier):
    def __new__(cls, value: Optional[Any] = ..., _sn_gen: Any = ..., _prefix: Any = ...): ...
    def toPython(self): ...
    def n3(self, namespace_manager: Optional[Any] = ...): ...
    def __getnewargs__(self): ...
    def __reduce__(self): ...
    def md5_term_hash(self): ...
    def skolemize(self, authority: str = ...): ...

class Literal(Identifier):
    def __new__(cls, lexical_or_value: Any, lang: Optional[Any] = ..., datatype: Optional[Any] = ..., normalize: Optional[Any] = ...): ...
    def normalize(self): ...
    @property
    def value(self): ...
    @property
    def language(self): ...
    @property
    def datatype(self): ...
    def __reduce__(self): ...
    def __add__(self, val: Any): ...
    def __bool__(self): ...
    def __neg__(self): ...
    def __pos__(self): ...
    def __abs__(self): ...
    def __invert__(self): ...
    def __gt__(self, other: Any): ...
    def __lt__(self, other: Any): ...
    def __le__(self, other: Any): ...
    def __ge__(self, other: Any): ...
    def __hash__(self): ...
    def __eq__(self, other: Any): ...
    def eq(self, other: Any): ...
    def neq(self, other: Any): ...
    def n3(self, namespace_manager: Optional[Any] = ...): ...
    def toPython(self): ...
    def md5_term_hash(self): ...

def bind(datatype: Any, pythontype: Any, constructor: Optional[Any] = ..., lexicalizer: Optional[Any] = ...) -> None: ...
