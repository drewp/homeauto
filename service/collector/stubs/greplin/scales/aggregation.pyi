# Stubs for greplin.scales.aggregation (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class DefaultFormat:
    def getCount(self, data: Any): ...
    def getValue(self, data: Any): ...

class DirectFormat:
    def getCount(self, _: Any): ...
    def getValue(self, data: Any): ...

class TimerFormat:
    def getCount(self, data: Any): ...
    def getValue(self, data: Any): ...

class TimerMeanFormat:
    def getCount(self, data: Any): ...
    def getValue(self, data: Any): ...

class CounterFormat:
    def getCount(self, data: Any): ...
    def getValue(self, data: Any): ...

class MeterFormat:
    def getCount(self, data: Any): ...
    def getValue(self, data: Any): ...

class GaugeFormat:
    def getValue(self, data: Any): ...

class DataFormats:
    DEFAULT: Any = ...
    DIRECT: Any = ...
    TIMER: Any = ...
    TIMER_MEAN: Any = ...
    COUNTER: Any = ...
    METER: Any = ...
    GAUGE: Any = ...

class Aggregator:
    name: Any = ...
    def __init__(self, name: Optional[Any] = ..., dataFormat: Any = ...) -> None: ...
    def clone(self): ...

class Average(Aggregator):
    DEFAULT_NAME: str = ...
    def addValue(self, _: Any, value: Any) -> None: ...
    def result(self): ...

class Sum(Aggregator):
    DEFAULT_NAME: str = ...
    total: int = ...
    def addValue(self, _: Any, value: Any) -> None: ...
    def result(self): ...

class InverseMap(Aggregator):
    DEFAULT_NAME: str = ...
    def __init__(self, *args: Any, **kw: Any) -> None: ...
    def addValue(self, source: Any, data: Any) -> None: ...
    def result(self): ...

class Sorted(Aggregator):
    DEFAULT_NAME: str = ...
    def __init__(self, cmp: Optional[Any] = ..., key: Optional[Any] = ..., reverse: bool = ..., *args: Any, **kw: Any) -> None: ...
    def addValue(self, source: Any, data: Any) -> None: ...
    def result(self): ...
    def clone(self): ...

class Highlight(Aggregator):
    value: Any = ...
    source: Any = ...
    fn: Any = ...
    def __init__(self, name: Any, fn: Any, dataFormat: Any = ...) -> None: ...
    def addValue(self, source: Any, value: Any) -> None: ...
    def result(self): ...
    def clone(self): ...

class Aggregation:
    def __init__(self, aggregators: Any) -> None: ...
    def addSource(self, source: Any, data: Any) -> None: ...
    def addJsonDirectory(self, directory: Any, test: Optional[Any] = ...) -> None: ...
    def result(self, root: Optional[Any] = ...): ...

class FileInclusionTest:
    ignoreByName: Any = ...
    maxAge: Any = ...
    def __init__(self, ignoreByName: Optional[Any] = ..., maxAge: Optional[Any] = ...) -> None: ...
    def __call__(self, _: Any, fullPath: Any): ...
